# Backup configuration for DNS server (Pi-hole)

- name: Detect system architecture for rclone
  ansible.builtin.set_fact:
    rclone_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'arm' }}"

- name: Install rclone
  ansible.builtin.get_url:
    url: "https://downloads.rclone.org/v{{ rclone_version | default('1.63.1') }}/rclone-v{{ rclone_version | default('1.63.1') }}-linux-{{ rclone_arch }}.zip"
    dest: "/tmp/rclone.zip"
  register: rclone_download

- name: Extract rclone
  ansible.builtin.unarchive:
    src: "/tmp/rclone.zip"
    dest: "/tmp"
    remote_src: true
  when: rclone_download.changed

- name: Install rclone binary
  ansible.builtin.copy:
    src: "/tmp/rclone-v{{ rclone_version | default('1.63.1') }}-linux-{{ rclone_arch }}/rclone"
    dest: "/usr/local/bin/rclone"
    mode: '0755'
    remote_src: true
  become: true
  when: rclone_download.changed

- name: Create rclone config directory
  ansible.builtin.file:
    path: "/home/{{ ansible_user }}/.config/rclone"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0700'

- name: Create rclone configuration
  ansible.builtin.template:
    src: rclone.conf.j2
    dest: "/home/{{ ansible_user }}/.config/rclone/rclone.conf"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0600'

- name: Create backup directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  loop:
    - "/home/{{ ansible_user }}/backups"
    - "/home/{{ ansible_user }}/scripts"
    - "/var/log/backups"

- name: Create DNS backup script
  ansible.builtin.template:
    src: backup-dns.sh.j2
    dest: "/home/{{ ansible_user }}/scripts/backup-dns.sh"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Create cron job for DNS backup
  ansible.builtin.cron:
    name: "DNS server backup"
    minute: "30"
    hour: "1"
    job: "/home/{{ ansible_user }}/scripts/backup-dns.sh >> /var/log/backups/dns-backup.log 2>&1"
    user: "{{ ansible_user }}"
  when: backup_enabled | default(true)

- name: Create backup cleanup cron job
  ansible.builtin.cron:
    name: "Cleanup old DNS backups"
    minute: "0"
    hour: "4"
    job: "find /home/{{ ansible_user }}/backups -name '*.tar.gz' -mtime +{{ backup_retention_days | default(30) }} -delete"
    user: "{{ ansible_user }}"
  when: backup_enabled | default(true)