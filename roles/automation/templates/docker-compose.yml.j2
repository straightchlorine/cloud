---
# Automation Stack Docker Compose
# Raspberry Pi 4B - Traefik + NextCloud + Paperless-ngx


networks:
  traefik-network:
    external: true
  nextcloud-network:
    internal: true
  paperless-network:
    internal: true

volumes:
  traefik-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: {{ automation_data_path }}/traefik
  nextcloud-data:
  nextcloud-config:
  nextcloud-apps:
  nextcloud-db:
  paperless-data:
  paperless-media:
  paperless-export:
  paperless-consume:
  paperless-db:
  paperless-redis:

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    ports:
      - "{{ traefik_web_port }}:80"
      - "{{ traefik_websecure_port }}:443"
      - "{{ traefik_dashboard_port }}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik:/config:ro
      - {{ automation_data_path }}/traefik:/data
      - ./logs:/logs
    environment:
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_INSECURE=true
    command:
      - --configFile=/config/traefik.yml
    networks:
      - traefik-network
    labels:
      - "traefik.enable=false"  # Dashboard accessed directly on port 8080

  # NextCloud Database
  nextcloud-db:
    image: mariadb:10.11
    container_name: nextcloud-db
    restart: unless-stopped
    command: --transaction-isolation=READ-COMMITTED --log-bin=binlog --binlog-format=ROW
    volumes:
      - nextcloud-db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD={{ nextcloud_db_password }}
      - MYSQL_PASSWORD={{ nextcloud_db_password }}
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_INITDB_SKIP_TZINFO=1
    networks:
      - nextcloud-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-u", "root", "-p{{ nextcloud_db_password }}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NextCloud Redis
  nextcloud-redis:
    image: redis:7-alpine
    container_name: nextcloud-redis
    restart: unless-stopped
    command: redis-server --requirepass {{ redis_password }}
    networks:
      - nextcloud-network

  # NextCloud Application
  nextcloud:
    image: nextcloud:28-apache
    container_name: nextcloud
    restart: unless-stopped
    volumes:
      - nextcloud-data:/var/www/html/data
      - nextcloud-config:/var/www/html/config
      - nextcloud-apps:/var/www/html/custom_apps
      - {{ automation_data_path }}/nextcloud/data:/external-data
    environment:
      - MYSQL_HOST=nextcloud-db
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_PASSWORD={{ nextcloud_db_password }}
      - REDIS_HOST=nextcloud-redis
      - REDIS_HOST_PASSWORD={{ redis_password }}
      - NEXTCLOUD_ADMIN_USER={{ nextcloud_admin_user }}
      - NEXTCLOUD_ADMIN_PASSWORD={{ nextcloud_admin_password }}
      - NEXTCLOUD_TRUSTED_DOMAINS={{ subdomain_nextcloud }}.{{ domain_name }}
      - OVERWRITEPROTOCOL=https
      - OVERWRITEHOST={{ subdomain_nextcloud }}.{{ domain_name }}
      - OVERWRITECLIURL=https://{{ subdomain_nextcloud }}.{{ domain_name }}
      - APACHE_DISABLE_REWRITE_IP=1
      - TRUSTED_PROXIES=172.16.0.0/12
    depends_on:
      nextcloud-db:
        condition: service_healthy
      nextcloud-redis:
        condition: service_started
    networks:
      - nextcloud-network
      - traefik-network
    healthcheck:
      test: curl -f http://localhost:80/status.php || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.rule=Host(`{{ subdomain_nextcloud }}.{{ domain_name }}`)"
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
      - "traefik.http.routers.nextcloud.tls.certresolver=letsencrypt"
      - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
      - "traefik.http.middlewares.nextcloud-dav.replacepathregex.regex=^/.well-known/ca(l|rd)dav"
      - "traefik.http.middlewares.nextcloud-dav.replacepathregex.replacement=/remote.php/dav/"
      - "traefik.http.routers.nextcloud.middlewares=nextcloud-dav"

  # Paperless-ngx Database
  paperless-db:
    image: postgres:15
    container_name: paperless-db
    restart: unless-stopped
    volumes:
      - paperless-db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=paperless
      - POSTGRES_USER=paperless
      - POSTGRES_PASSWORD={{ paperless_db_password }}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    networks:
      - paperless-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d paperless -U paperless"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Paperless-ngx Redis
  paperless-redis:
    image: redis:7-alpine
    container_name: paperless-redis
    restart: unless-stopped
    command: redis-server --requirepass {{ paperless_redis_password }}
    volumes:
      - paperless-redis:/data
    networks:
      - paperless-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "{{ paperless_redis_password }}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Paperless-ngx Tika (OCR) - Disabled due to ARM64 compatibility issues
  # paperless-tika:
  #   image: apache/tika:2.9.1.0-full
  #   container_name: paperless-tika
  #   restart: unless-stopped
  #   networks:
  #     - paperless-network

  # Paperless-ngx Gotenberg (PDF conversion)
  paperless-gotenberg:
    image: gotenberg/gotenberg:7.10
    container_name: paperless-gotenberg
    restart: unless-stopped
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"
    networks:
      - paperless-network

  # Paperless-ngx Application
  paperless-web:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperless-web
    restart: unless-stopped
    depends_on:
      paperless-db:
        condition: service_healthy
      paperless-redis:
        condition: service_healthy
      paperless-gotenberg:
        condition: service_started
    volumes:
      - paperless-data:/usr/src/paperless/data
      - paperless-media:/usr/src/paperless/media
      - paperless-export:/usr/src/paperless/export
      - paperless-consume:/usr/src/paperless/consume
      - {{ automation_data_path }}/paperless/consume:/external-consume
      - {{ automation_data_path }}/paperless/export:/external-export
      - ./logs:/usr/src/paperless/logs
    env_file:
      - ./config/paperless/paperless.env
    networks:
      - paperless-network
      - traefik-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.paperless.rule=Host(`{{ subdomain_paperless }}.{{ domain_name }}`)"
      - "traefik.http.routers.paperless.entrypoints=websecure"
      - "traefik.http.routers.paperless.tls.certresolver=letsencrypt"
      - "traefik.http.services.paperless.loadbalancer.server.port=8000"