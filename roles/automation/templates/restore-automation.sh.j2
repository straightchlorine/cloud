#!/bin/bash

BACKUP_DIR="{{ automation_data_path }}/backups"
AUTOMATION_HOME="{{ automation_stack_home }}"
DATA_PATH="{{ automation_data_path }}"

if [ $# -eq 0 ]; then
    echo "Usage: $0 <backup_timestamp>"
    echo "Available backups:"
    ls -la "$BACKUP_DIR"/*.tar.gz 2>/dev/null | awk '{print $9}' | sed 's/.*automation_backup_//;s/.tar.gz//'
    exit 1
fi

TIMESTAMP="$1"
BACKUP_FILE="automation_backup_$TIMESTAMP.tar.gz"

if [ ! -f "$BACKUP_DIR/$BACKUP_FILE" ]; then
    echo "Error: Backup file $BACKUP_FILE not found!"
    exit 1
fi

echo "WARNING: This will restore from backup $TIMESTAMP"
echo "This will overwrite current data!"
read -p "Are you sure? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Restore cancelled."
    exit 0
fi

echo "Starting restore process..."

echo "Stopping services..."
cd "$AUTOMATION_HOME"
docker compose down

echo "Creating safety backup..."
SAFETY_BACKUP="safety_backup_$(date +%Y%m%d_%H%M%S).tar.gz"
tar -czf "$BACKUP_DIR/$SAFETY_BACKUP" \
    -C / \
    "$(echo $DATA_PATH | sed 's|^/||')" \
    "$(echo $AUTOMATION_HOME | sed 's|^/||')"

echo "Restoring files..."
tar -xzf "$BACKUP_DIR/$BACKUP_FILE" -C /

echo "Starting services..."
docker compose up -d

echo "Restore completed successfully!"
echo "Safety backup created: $SAFETY_BACKUP"