---
# Backup configuration and scripts

- name: Detect system architecture for rclone
  ansible.builtin.set_fact:
    rclone_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'arm' }}"

- name: Install rclone
  ansible.builtin.get_url:
    url: "https://downloads.rclone.org/v{{ rclone_version }}/rclone-v{{ rclone_version }}-linux-{{ rclone_arch }}.zip"
    dest: "/tmp/rclone.zip"
  register: rclone_download

- name: Extract rclone
  ansible.builtin.unarchive:
    src: "/tmp/rclone.zip"
    dest: "/tmp"
    remote_src: true
  when: rclone_download.changed

- name: Install rclone binary
  ansible.builtin.copy:
    src: "/tmp/rclone-v{{ rclone_version }}-linux-{{ rclone_arch }}/rclone"
    dest: "/usr/local/bin/rclone"
    mode: '0755'
    remote_src: true
  become: true
  when: rclone_download.changed

- name: Create rclone config directory
  ansible.builtin.file:
    path: "/home/{{ ansible_user }}/.config/rclone"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0700'

- name: Create rclone configuration
  ansible.builtin.template:
    src: rclone.conf.j2
    dest: "/home/{{ ansible_user }}/.config/rclone/rclone.conf"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0600'

- name: Create backup scripts directory
  ansible.builtin.file:
    path: "{{ music_stack_home }}/scripts"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Create backup scripts
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ music_stack_home }}/scripts/{{ item }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  loop: "{{ backup_scripts }}"

- name: Debug YouTube sync configuration
  ansible.builtin.debug:
    msg:
      - "youtube_sync_enabled: {{ youtube_sync_enabled | default('UNDEFINED') }}"
      - "youtube_playlists: {{ youtube_playlists | default('UNDEFINED') }}"
  tags: [youtube, debug]

- name: Create cron job for daily backup
  ansible.builtin.cron:
    name: "Music library backup"
    minute: "0"
    hour: "2"
    job: "{{ music_stack_home }}/scripts/sync-backups.sh >> {{ music_stack_home }}/logs/backup.log 2>&1"
    user: "{{ ansible_user }}"
  when: enable_backup_cron | default(true)

- name: Add PATH environment variable to crontab
  ansible.builtin.cron:
    name: "PATH"
    env: true
    value: "/usr/local/bin:/usr/bin:/bin"
    user: "{{ ansible_user }}"
  when: youtube_sync_enabled is defined and youtube_sync_enabled
  tags: [youtube, cron]

- name: Add PLAYLIST_URL environment variable to crontab for YouTube sync
  ansible.builtin.cron:
    name: "PLAYLIST_URL"
    env: true
    value: "{{ vault_youtube_playlist_url | default('') }}"
    user: "{{ ansible_user }}"
  when: youtube_sync_enabled is defined and youtube_sync_enabled and vault_youtube_playlist_url is defined
  tags: [youtube, cron]

- name: Create cron job for daily YouTube playlist sync
  ansible.builtin.cron:
    name: "Daily YouTube playlist sync"
    hour: "2"
    minute: "30"
    job: "{{ music_stack_home }}/scripts/youtube-cron.sh >> {{ music_stack_home }}/logs/youtube-cron.log 2>&1"
    user: "{{ ansible_user }}"
  when: youtube_sync_enabled is defined and youtube_sync_enabled
  tags: [youtube, cron]

- name: Create cron job for weekly Beets rescan
  ansible.builtin.cron:
    name: "Weekly Beets rescan of misc folder"
    hour: "4"
    minute: "15"
    weekday: "0"
    job: "{{ music_stack_home }}/scripts/beets-rescan.sh >> {{ music_stack_home }}/logs/beets-rescan.log 2>&1"
    user: "{{ ansible_user }}"
  when: youtube_sync_enabled is defined and youtube_sync_enabled
  tags: [youtube, cron, beets]