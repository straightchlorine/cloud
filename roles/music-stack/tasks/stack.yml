# Music stack deployment

- name: Create Docker Compose file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ music_stack_home }}/docker-compose.yml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  notify: restart music stack

- name: Create Beets config directory
  ansible.builtin.file:
    path: "{{ music_stack_home }}/config/beets"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Create Beets configuration
  ansible.builtin.template:
    src: beets-config.yaml.j2
    dest: "{{ music_stack_home }}/config/beets/config.yaml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'

- name: Create genres whitelist for Beets
  ansible.builtin.copy:
    content: "{{ beets_genres | join('\n') }}\n"
    dest: "{{ music_stack_home }}/config/beets/genres.txt"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'

- name: Create additional Beets directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  loop:
    - "{{ music_stack_home }}/archive"
    - "{{ music_library_path }}/downloads"
    - "{{ music_library_path }}/processing"

- name: Pre-create beets database file to avoid interactive prompts
  ansible.builtin.file:
    path: "{{ music_stack_home }}/config/beets/library.db"
    state: touch
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  tags: [beets, database]

- name: Create YouTube cache and config directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  loop:
    - "{{ music_stack_home }}/config/cache"
    - "{{ music_stack_home }}/scripts"
  tags: [youtube, config]

- name: Create Navidrome config directory
  ansible.builtin.file:
    path: "{{ music_stack_home }}/config/navidrome"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Create logs directory
  ansible.builtin.file:
    path: "{{ music_stack_home }}/logs"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Generate JWT secret for Navidrome
  ansible.builtin.command: openssl rand -hex 32
  register: jwt_secret
  changed_when: false
  no_log: true

- name: Create .env file for Docker Compose
  ansible.builtin.template:
    src: env.j2
    dest: "{{ music_stack_home }}/.env"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0600'
  vars:
    navidrome_jwt_secret: "{{ jwt_secret.stdout }}"
  notify: restart music stack

- name: Install minimal dependencies for yt-dlp
  ansible.builtin.apt:
    name: "{{ ytdlp_dependencies }}"
    state: present
  become: true
  tags: [youtube, ytdlp]

- name: Detect system architecture for yt-dlp
  ansible.builtin.set_fact:
    ytdlp_arch: "{{ 'aarch64' if ansible_architecture == 'aarch64' else 'arm64' }}"
  tags: [youtube, ytdlp]

- name: Download yt-dlp binary
  ansible.builtin.get_url:
    url: "https://github.com/yt-dlp/yt-dlp/releases/download/{{ ytdlp_version }}/yt-dlp_linux_{{ ytdlp_arch }}"
    dest: /usr/local/bin/yt-dlp
    mode: '0755'
    owner: root
    group: root
    force: true
    backup: true
  become: true
  register: ytdlp_download
  tags: [youtube, ytdlp]

- name: Ensure yt-dlp binary is executable
  ansible.builtin.file:
    path: /usr/local/bin/yt-dlp
    mode: '0755'
    owner: root
    group: root
  become: true
  tags: [youtube, ytdlp]

- name: Verify yt-dlp installation
  ansible.builtin.command: /usr/local/bin/yt-dlp --version
  register: ytdlp_version_check
  changed_when: false
  become: true
  tags: [youtube, ytdlp]



- name: Create YouTube download configuration
  ansible.builtin.template:
    src: yt-dlp.conf.j2
    dest: "{{ music_stack_home }}/config/yt-dlp.conf"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  tags: [youtube, ytdlp, config]

- name: Create YouTube playlist download script
  ansible.builtin.template:
    src: youtube-sync.sh.j2
    dest: "{{ music_stack_home }}/scripts/youtube-sync.sh"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  tags: [youtube, ytdlp, scripts]


- name: Create YouTube environment configuration file
  ansible.builtin.template:
    src: youtube.env.j2
    dest: "{{ music_stack_home }}/config/youtube.env"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  tags: [youtube, config]


- name: Create YouTube cron wrapper script
  ansible.builtin.template:
    src: youtube-cron.sh.j2
    dest: "{{ music_stack_home }}/scripts/youtube-cron.sh"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  tags: [youtube, scripts, cron]

- name: Create Beets rescan script
  ansible.builtin.template:
    src: beets-rescan.sh.j2
    dest: "{{ music_stack_home }}/scripts/beets-rescan.sh"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  tags: [youtube, scripts, beets]

- name: Create Beets import test script
  ansible.builtin.template:
    src: test-beets-import.sh.j2
    dest: "{{ music_stack_home }}/scripts/test-beets-import.sh"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  tags: [youtube, scripts, beets, test]

- name: Start music stack
  community.docker.docker_compose_v2:
    project_src: "{{ music_stack_home }}"
    state: present
  when: start_stack | default(true)

