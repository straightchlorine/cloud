directory: /music
library: /config/library.db

import:
    move: yes
    copy: no
    write: yes
    resume: yes
    incremental: yes
    quiet_fallback: skip
    timid: no
    log: /config/import.log
    # Enhanced YouTube download handling - FULLY AUTOMATIC
    from_scratch: no
    group_albums: no
    # Allow duplicates for different qualities/versions
    duplicate_action: keep
    # Auto-tag YouTube singles as singletons
    autotag: yes
    # Handle cases where no match is found - AUTOMATIC
    none_rec_action: asis
    # Automatically import as singletons when no album match
    default_action: apply
    # Force automatic decisions to prevent any prompts
    art: no

match:
    strong_rec_thresh: 0.04
    medium_rec_thresh: 0.25
    # Very lenient matching for YouTube content
    ignored_media: ['Data CD', 'DVD-Video', 'Blu-ray', 'Digital Media']
    # Distance penalties for YouTube matching
    distance_weights:
        source: 0.1
        album: 0.5
        albumartist: 0.2
        artist: 0.4
        track: 0.4
    
per_disc_numbering: yes

paths:
    # Standard music organization (for properly tagged albums)
    default: $albumartist/$album%aunique{}/%if{$track,${track}. }$title
    # YouTube content - now with proper metadata from yt-dlp
    singleton: $artist/$title
    # Compilation albums
    comp: Compilations/$album%aunique{}/%if{$track,${track}. }$title
    # YouTube singles and playlists (leverages yt-dlp metadata)
    genre:Music: $artist/$album/$title
    # Fallback for any remaining unorganized content
    albumartist_sort:"": YouTube Downloads/$artist/$title

# Essential plugins only (removed problematic ones)
plugins: fetchart embedart inline web

fetchart:
    auto: yes
    cautious: yes
    sources: filesystem coverart itunes amazon albumart
    
embedart:
    auto: yes
    maxwidth: 1000
    quality: 95
    remove_art_file: no

web:
    host: 0.0.0.0
    port: 8337
    cors: ''
    reverse_proxy: false

# Inline plugin for custom field calculations
inline:
    # Add a YouTube flag for identification
    is_youtube: "True if 'youtube' in path.lower() or uploader else False"
    # Enhanced artist extraction from title (common YouTube patterns)
    title_artist: |
        import re
        # Return existing artist if available
        if artist and artist != 'Unknown Artist':
            return artist
        # Try various separators: " - ", ": ", " by ", " | "
        separators = [' - ', ': ', ' by ', ' | ', ' – ']
        for sep in separators:
            if sep in title:
                parts = title.split(sep, 1)
                potential_artist = parts[0].strip()
                # Filter out common non-artist prefixes
                if potential_artist and not potential_artist.lower().startswith(('official', 'music video', 'audio', 'hd')):
                    return potential_artist
        # Fallback to uploader if no artist found
        return uploader or 'Unknown Artist'
    
    # Enhanced title cleaning with better pattern recognition
    clean_track_title: |
        import re
        clean_title = title
        
        # Remove common YouTube suffixes
        suffixes = [r'\s*\(official.*?\)', r'\s*\[official.*?\]', r'\s*\(music video\)', 
                   r'\s*\[music video\]', r'\s*\(audio\)', r'\s*\[audio\]', r'\s*\(hd\)', 
                   r'\s*\[hd\]', r'\s*\(lyrics\)', r'\s*\[lyrics\]']
        
        for suffix in suffixes:
            clean_title = re.sub(suffix, '', clean_title, flags=re.IGNORECASE)
        
        # Try various separators to extract just the song title
        separators = [' - ', ': ', ' by ', ' | ', ' – ']
        for sep in separators:
            if sep in clean_title:
                parts = clean_title.split(sep, 1)
                if len(parts) > 1:
                    song_part = parts[1].strip()
                    if song_part:
                        clean_title = song_part
                        break
        
        return clean_title.strip() or title