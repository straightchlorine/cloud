#!/bin/bash
# Enhanced Test Script for YouTube Cron Workflow
# Tests the complete YouTube download -> Beets import -> Archiving process
# Simulates the cron environment and validates all components

set -euo pipefail

# Configuration
MUSIC_STACK_HOME="{{ music_stack_home }}"
DOWNLOAD_DIR="{{ music_library_path }}/downloads"
PROCESSING_DIR="{{ music_library_path }}/processing"
LIBRARY_DIR="{{ music_library_path }}/music"
LOG_FILE="$MUSIC_STACK_HOME/logs/youtube-cron-test.log"
CONFIG_DIR="$MUSIC_STACK_HOME/config"
BEETS_CONFIG="$CONFIG_DIR/beets/config.yaml"

# Test mode flags
TEST_MODE="${1:-full}"  # full, beets-only, or setup-only
CREATE_TEST_FILES="${CREATE_TEST_FILES:-true}"

# Trap to cleanup test files on exit
cleanup() {
    local exit_code=$?
    if [[ "$CREATE_TEST_FILES" == "true" && -d "$DOWNLOAD_DIR/test-files" ]]; then
        log "Cleaning up test files..." "INFO"
        rm -rf "$DOWNLOAD_DIR/test-files" 2>/dev/null || true
    fi
    exit $exit_code
}
trap cleanup EXIT INT TERM

# Ensure log directory exists
mkdir -p "$(dirname "$LOG_FILE")"

# Enhanced logging function
log() {
    local level="${2:-INFO}"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $1" | tee -a "$LOG_FILE"
}

# Function to create simple test audio files
create_test_files() {
    local test_dir="$DOWNLOAD_DIR/test-files"
    mkdir -p "$test_dir"
    
    log "Creating test audio files..." "INFO"
    
    # Create minimal valid audio files 
    touch "$test_dir/Test Song.opus"
    touch "$test_dir/Another Song.mp3"
    
    log "Created 2 test files" "INFO"
}

log "=== YouTube Cron Workflow Test Started (mode: $TEST_MODE) ==="

# Pre-flight checks
log "Running pre-flight checks..." "INFO"

# Check if docker-compose file exists
if [[ ! -f "$MUSIC_STACK_HOME/docker-compose.yml" ]]; then
    log "ERROR: docker-compose.yml not found at $MUSIC_STACK_HOME/docker-compose.yml" "ERROR"
    exit 1
fi

# Check if beets config exists
if [[ ! -f "$BEETS_CONFIG" ]]; then
    log "ERROR: Beets configuration not found at $BEETS_CONFIG" "ERROR"
    exit 1
fi

# Validate directory structure
for dir in "$DOWNLOAD_DIR" "$PROCESSING_DIR" "$LIBRARY_DIR"; do
    if [[ ! -d "$dir" ]]; then
        log "WARNING: Directory $dir does not exist, creating..." "WARN"
        mkdir -p "$dir"
    fi
done

# Ensure beets config directory exists
BEETS_CONFIG_DIR="$CONFIG_DIR/beets"
if [[ ! -d "$BEETS_CONFIG_DIR" ]]; then
    log "Creating beets config directory: $BEETS_CONFIG_DIR" "INFO"
    mkdir -p "$BEETS_CONFIG_DIR"
fi

# Pre-create the beets library database file to avoid interactive prompts
BEETS_LIBRARY_DB="$BEETS_CONFIG_DIR/library.db"
if [[ ! -f "$BEETS_LIBRARY_DB" ]]; then
    log "Pre-creating beets database to avoid interactive prompts..." "INFO"
    touch "$BEETS_LIBRARY_DB"
fi

# Check Docker and compose availability
if ! command -v docker >/dev/null 2>&1; then
    log "ERROR: Docker is not available" "ERROR"
    exit 1
fi

# Test docker compose connectivity
if ! docker compose -f "$MUSIC_STACK_HOME/docker-compose.yml" config >/dev/null 2>&1; then
    log "ERROR: Docker compose configuration is invalid" "ERROR"
    exit 1
fi

log "✅ Pre-flight checks completed successfully" "INFO"

if [[ "$TEST_MODE" == "setup-only" ]]; then
    log "Setup-only mode completed" "INFO"
    exit 0
fi

# Test Environment Simulation
log "Simulating cron environment..." "INFO"

# Source the YouTube environment file if it exists (like the cron would)
YOUTUBE_ENV_FILE="$CONFIG_DIR/youtube.env"
if [[ -f "$YOUTUBE_ENV_FILE" ]]; then
    log "Loading YouTube environment variables from $YOUTUBE_ENV_FILE" "INFO"
    set -a  # automatically export all variables
    source "$YOUTUBE_ENV_FILE"
    set +a
else
    log "WARNING: YouTube environment file not found at $YOUTUBE_ENV_FILE" "WARN"
fi

# Count existing audio files
EXISTING_AUDIO_COUNT=$(find "$DOWNLOAD_DIR" -type f \( -name "*.opus" -o -name "*.m4a" -o -name "*.mp3" -o -name "*.ogg" -o -name "*.flac" \) 2>/dev/null | wc -l)
log "Found $EXISTING_AUDIO_COUNT existing audio files in downloads directory" "INFO"

# Create test files if none exist and we're in full test mode
if [[ $EXISTING_AUDIO_COUNT -eq 0 && "$TEST_MODE" == "full" && "$CREATE_TEST_FILES" == "true" ]]; then
    create_test_files
    EXISTING_AUDIO_COUNT=2
fi

# Test beets container startup
log "Testing beets container startup..." "INFO"
if docker compose -f "$MUSIC_STACK_HOME/docker-compose.yml" run --rm -T beets \
    beet --config /config/config.yaml version 2>&1 | tee -a "$LOG_FILE"; then
    log "✅ Beets container startup successful" "INFO"
else
    log "❌ Beets container startup failed" "ERROR"
    exit 1
fi

if [[ $EXISTING_AUDIO_COUNT -eq 0 ]]; then
    log "WARNING: No audio files found to test import" "WARN"
    log "To test with real files, place audio files in: $DOWNLOAD_DIR" "INFO"
    log "Or run with CREATE_TEST_FILES=true to create dummy files" "INFO"
    exit 0
fi

# Test the complete beets import workflow (matching youtube-sync.sh behavior)
log "Testing complete beets import workflow..." "INFO"
log "Files to process: $EXISTING_AUDIO_COUNT" "INFO"


# Test the beets import command
log "Running beets import..." "INFO"

BEETS_EXIT_CODE=0
IMPORT_START_TIME=$(date +%s)

if docker compose -f "$MUSIC_STACK_HOME/docker-compose.yml" run --rm -T beets \
    beet --config /config/config.yaml import -q /downloads 2>&1 | tee -a "$LOG_FILE"; then
    IMPORT_END_TIME=$(date +%s)
    IMPORT_DURATION=$((IMPORT_END_TIME - IMPORT_START_TIME))
    log "✅ Beets import completed successfully in ${IMPORT_DURATION}s" "INFO"
else
    BEETS_EXIT_CODE=$?
    log "❌ Beets import failed with exit code $BEETS_EXIT_CODE" "ERROR"
fi

# Simple archiving test
if [[ $BEETS_EXIT_CODE -eq 0 && "$TEST_MODE" == "full" ]]; then
    log "Testing basic archiving..." "INFO"
    ARCHIVE_DIR="$MUSIC_STACK_HOME/archive/test-$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$ARCHIVE_DIR"
    log "✅ Archive directory ready" "INFO"
fi

# Test library verification
log "Verifying imported files in library..." "INFO"
LIBRARY_COUNT=$(find "$LIBRARY_DIR" -type f \( -name "*.opus" -o -name "*.m4a" -o -name "*.mp3" -o -name "*.ogg" -o -name "*.flac" \) 2>/dev/null | wc -l)
log "Library now contains $LIBRARY_COUNT audio files" "INFO"

# Test beets database queries
log "Testing beets database queries..." "INFO"
if docker compose -f "$MUSIC_STACK_HOME/docker-compose.yml" run --rm -T beets \
    beet --config /config/config.yaml stats 2>&1 | tee -a "$LOG_FILE"; then
    log "✅ Beets database queries working" "INFO"
else
    log "❌ Beets database queries failed" "ERROR"
    BEETS_EXIT_CODE=1
fi

# Show container status
log "Current container status:" "INFO"
docker compose -f "$MUSIC_STACK_HOME/docker-compose.yml" ps || true

# Summary report
log "=== Test Summary ===" "INFO"
log "Files processed: $EXISTING_AUDIO_COUNT" "INFO"  
log "Files in library: $LIBRARY_COUNT" "INFO"

if [[ $BEETS_EXIT_CODE -eq 0 ]]; then
    log "✅ Beets import test: SUCCESS" "INFO"
else
    log "❌ Beets import test: FAILED" "ERROR"
fi
exit $BEETS_EXIT_CODE