---
# Music stack deployment playbook for Raspberry Pi 3B

- name: Deploy Music Stack on Raspberry Pi 3B
  hosts: pi-music
  become: true
  gather_facts: true
  vars_files:
    - "{{ playbook_dir }}/../group_vars/vault.yml"
  vars:
    # Ensure vault variables are available to roles
    youtube_playlists: "{{ vault_youtube_playlists | default([]) }}"
    youtube_quality: "{{ vault_youtube_quality | default('best') }}"
    youtube_concurrent: "{{ vault_youtube_concurrent | default(10) }}"
    youtube_extra_args: "{{ vault_youtube_extra_args | default('') }}"
    # Enable YouTube sync for this playbook (overrides host_vars if needed)
    youtube_sync_enabled: true
  tags: [music-stack]
  
  pre_tasks:
    - name: Update package cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      tags: [packages]


  roles:
    - role: common
      tags: [common, base]
    - role: firewall
      tags: [firewall, security]
    - role: prometheus-node-exporter
      tags: [monitoring, prometheus]
    - role: music-stack
      tags: [music, docker, stack]

  post_tasks:
    - name: Display deployment information
      ansible.builtin.debug:
        msg: |
          ðŸŽµ Music Stack Deployment Complete!
          
          Services:
          - Navidrome: http://{{ ansible_default_ipv4.address }}:{{ navidrome_port }}
          - Dozzle (Logs): http://{{ ansible_default_ipv4.address }}:{{ dozzle_port }}
          
          Useful commands on the Pi:
          - Manage stack: music-stack {start|stop|restart|status}
          - Import music: music-stack import
          - Run backups: ~/{{ music_stack_home | basename }}/scripts/sync-backups.sh
          - View logs: docker compose -f ~/{{ music_stack_home | basename }}/docker-compose.yml logs -f
          
          Directory structure:
          - Music library: {{ music_library_path }}/music
          - Downloads: {{ music_library_path }}/downloads
          - Processing: {{ music_library_path }}/processing
          - Config: ~/{{ music_stack_home | basename }}/config/
          - Scripts: ~/{{ music_stack_home | basename }}/scripts/
          - Logs: ~/{{ music_stack_home | basename }}/logs/
      tags: [info]

    - name: Check if management script exists
      ansible.builtin.stat:
        path: "{{ music_stack_home }}/scripts/manage-stack.sh"
      register: manage_script_stat
      tags: [shortcuts]

    - name: Create management script shortcuts
      ansible.builtin.file:
        src: "{{ music_stack_home }}/scripts/manage-stack.sh"
        dest: "/usr/local/bin/music-stack"
        state: link
      become: true
      when: manage_script_stat.stat.exists
      tags: [shortcuts]

    - name: Create youtube sync script shortcut
      ansible.builtin.file:
        src: "{{ music_stack_home }}/scripts/youtube-sync.sh"
        dest: "/usr/local/bin/youtube-sync"
        state: link
      become: true
      when: manage_script_stat.stat.exists
      tags: [shortcuts]

    - name: Verify services are running
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ item.port }}"
        method: GET
        timeout: 10
      loop:
        - { port: "{{ navidrome_port }}", service: "Navidrome" }
        - { port: "{{ dozzle_port }}", service: "Dozzle" }
      register: service_check
      failed_when: false
      tags: [verification]

    - name: Display service status
      ansible.builtin.debug:
        msg: "{{ item.item.service }} on port {{ item.item.port }}: {{ 'UP' if item.status == 200 else 'DOWN' }}"
      loop: "{{ service_check.results }}"
      tags: [verification]