- name: Deploy Automation Stack
  hosts: pi-automation
  become: true
  gather_facts: true
  vars_files:
    - "{{ playbook_dir }}/../group_vars/vault.yml"
  vars:
    domain_name: "{{ vault_domain_name }}"
    letsencrypt_email: "{{ vault_letsencrypt_email }}"
    traefik_basic_auth: "{{ vault_traefik_basic_auth }}"
  tags: [automation-stack]

  pre_tasks:
    - name: Update package cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      tags: [packages]

    - name: Install additional system packages
      ansible.builtin.apt:
        name: "{{ additional_packages }}"
        state: present
      when: additional_packages is defined and additional_packages | length > 0
      tags: [packages]

  roles:
    - role: common
      tags: [common, base]
    - role: firewall
      tags: [firewall, security]
    - role: prometheus-node-exporter
      tags: [monitoring, prometheus]
    - role: automation
      tags: [automation, docker, services]

  post_tasks:
    - name: Display deployment information
      ansible.builtin.debug:
        msg: |
          Automation Stack Deployment Complete!

          Services:
          - Traefik Dashboard: https://{{ subdomain_traefik }}.{{ domain_name }}

          Management:
          - Stack control: manage-automation {start|stop|restart|status|logs}
          - Backup: {{ automation_stack_home }}/scripts/backup-automation.sh

          Data locations:
          - Configuration: {{ automation_stack_home }}/
          - Data: {{ automation_data_path }}
          - Backups: {{ automation_data_path }}/backups
      tags: [info]

    - name: Verify Docker network exists
      community.docker.docker_network_info:
        name: traefik-network
      register: traefik_network_info
      become_user: "{{ ansible_user }}"
      tags: [verification]

    - name: Verify services are responding
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ item.port }}"
        method: GET
        timeout: 10
        follow_redirects: none
        status_code: [200, 301, 302, 401, 403]
      loop:
        - {port: "{{ traefik_web_port }}", service: "Traefik HTTP"}
        - {port: "{{ traefik_dashboard_port }}", service: "Traefik Dashboard"}
      register: service_check
      failed_when: false
      tags: [verification]

    - name: Display service status
      ansible.builtin.debug:
        msg: "{{ item.item.service }}: {{ 'UP' if item.status in [200, 301, 302, 401, 403] else 'DOWN' }}"
      loop: "{{ service_check.results }}"
      tags: [verification]

